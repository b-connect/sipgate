/**
 * sipgate API
 * This is the sipgate REST API documentation. We build our new applications on this API and we invite you to use it too.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class FaxlinesApi {
    protected basePath = 'https://localhost/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Change faxline alias
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. f0
     * @param body 
     */
    public changeFaxlineAlias(userId: string, faxlineId: string, body?: models.SetAliasRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.changeFaxlineAliasWithHttpInfo(userId, faxlineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Change caller ID for faxline
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. f0
     * @param body 
     */
    public changeFaxlineCallerIdSettings(userId: string, faxlineId: string, body?: models.FaxlineCallerIdRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.changeFaxlineCallerIdSettingsWithHttpInfo(userId, faxlineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Change tagline for faxline
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. f0
     * @param body 
     */
    public changeTagline(userId: string, faxlineId: string, body?: models.FaxlineTaglineRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.changeTaglineWithHttpInfo(userId, faxlineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Creates a new faxline for the user
     * 
     * @param userId e.g. w0
     */
    public createFaxline(userId: string, extraHttpRequestParams?: any): Observable<models.FaxlineResponse> {
        return this.createFaxlineWithHttpInfo(userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Caller ID for faxline
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. f0
     */
    public getFaxlineCallerId(userId: string, faxlineId: string, extraHttpRequestParams?: any): Observable<models.FaxlineCallerIdResponse> {
        return this.getFaxlineCallerIdWithHttpInfo(userId, faxlineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns all fax lines
     * 
     * @param userId e.g. w0
     */
    public getFaxlines(userId: string, extraHttpRequestParams?: any): Observable<models.FaxlinesResponse> {
        return this.getFaxlinesWithHttpInfo(userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns all phone numbers
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. p0
     */
    public getPhonelineNumbers(userId: string, faxlineId: string, extraHttpRequestParams?: any): Observable<models.EndpointNumbersResponse> {
        return this.getPhonelineNumbersWithHttpInfo(userId, faxlineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Change faxline alias
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. f0
     * @param body 
     */
    public changeFaxlineAliasWithHttpInfo(userId: string, faxlineId: string, body?: models.SetAliasRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/faxlines/${faxlineId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling changeFaxlineAlias.');
        }
        // verify required parameter 'faxlineId' is not null or undefined
        if (faxlineId === null || faxlineId === undefined) {
            throw new Error('Required parameter faxlineId was null or undefined when calling changeFaxlineAlias.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Change caller ID for faxline
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. f0
     * @param body 
     */
    public changeFaxlineCallerIdSettingsWithHttpInfo(userId: string, faxlineId: string, body?: models.FaxlineCallerIdRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/faxlines/${faxlineId}/callerid`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling changeFaxlineCallerIdSettings.');
        }
        // verify required parameter 'faxlineId' is not null or undefined
        if (faxlineId === null || faxlineId === undefined) {
            throw new Error('Required parameter faxlineId was null or undefined when calling changeFaxlineCallerIdSettings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Change tagline for faxline
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. f0
     * @param body 
     */
    public changeTaglineWithHttpInfo(userId: string, faxlineId: string, body?: models.FaxlineTaglineRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/faxlines/${faxlineId}/tagline`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling changeTagline.');
        }
        // verify required parameter 'faxlineId' is not null or undefined
        if (faxlineId === null || faxlineId === undefined) {
            throw new Error('Required parameter faxlineId was null or undefined when calling changeTagline.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Creates a new faxline for the user
     * 
     * @param userId e.g. w0
     */
    public createFaxlineWithHttpInfo(userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/faxlines`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling createFaxline.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Caller ID for faxline
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. f0
     */
    public getFaxlineCallerIdWithHttpInfo(userId: string, faxlineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/faxlines/${faxlineId}/callerid`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getFaxlineCallerId.');
        }
        // verify required parameter 'faxlineId' is not null or undefined
        if (faxlineId === null || faxlineId === undefined) {
            throw new Error('Required parameter faxlineId was null or undefined when calling getFaxlineCallerId.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns all fax lines
     * 
     * @param userId e.g. w0
     */
    public getFaxlinesWithHttpInfo(userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/faxlines`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getFaxlines.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns all phone numbers
     * 
     * @param userId e.g. w0
     * @param faxlineId e.g. p0
     */
    public getPhonelineNumbersWithHttpInfo(userId: string, faxlineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/faxlines/${faxlineId}/numbers`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getPhonelineNumbers.');
        }
        // verify required parameter 'faxlineId' is not null or undefined
        if (faxlineId === null || faxlineId === undefined) {
            throw new Error('Required parameter faxlineId was null or undefined when calling getPhonelineNumbers.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}

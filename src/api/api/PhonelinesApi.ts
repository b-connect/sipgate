/**
 * sipgate API
 * This is the sipgate REST API documentation. We build our new applications on this API and we invite you to use it too.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class PhonelinesApi {
    protected basePath = 'https://localhost/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Upload your base64 encoded OGG/MP3/WAV greeting
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     * @param body
     */
    public addGreeting(userId: string, phonelineId: string, voicemailId: string, body?: models.AddGreetingRequest, extraHttpRequestParams?: any): Observable<models.GreetingsResponse> {
        return this.addGreetingWithHttpInfo(userId, phonelineId, voicemailId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Add parallel forwarding
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public addParallelForwarding(userId: string, phonelineId: string, body?: models.SetParallelForwardingRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.addParallelForwardingWithHttpInfo(userId, phonelineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Change parallel forwarding
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param parallelForwardingId e.g. x0
     * @param body
     */
    public changeParallelForwardingSettings(userId: string, phonelineId: string, parallelForwardingId: string, body?: models.SetParallelForwardingRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.changeParallelForwardingSettingsWithHttpInfo(userId, phonelineId, parallelForwardingId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Change phoneline alias
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public changePhoneline(userId: string, phonelineId: string, body?: models.SetAliasRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.changePhonelineWithHttpInfo(userId, phonelineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Change greeting settings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     * @param greetingId e.g. 42
     * @param body
     */
    public changePhonelineVoicemailGreeting(userId: string, phonelineId: string, voicemailId: string, greetingId: string, body?: models.ChangeVoicemailGreetingRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.changePhonelineVoicemailGreetingWithHttpInfo(userId, phonelineId, voicemailId, greetingId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Change voicemail settings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     * @param body
     */
    public changeVoicemailSettings(userId: string, phonelineId: string, voicemailId: string, body?: models.ChangeVoicemailRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.changeVoicemailSettingsWithHttpInfo(userId, phonelineId, voicemailId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Creates a new phoneline for the user
     *
     * @param userId e.g. w0
     */
    public createPhoneline(userId: string, extraHttpRequestParams?: any): Observable<models.PhonelineResponse> {
        return this.createPhonelineWithHttpInfo(userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * delete routing for device to phoneline
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param deviceId e.g. e0
     */
    public deleteDeviceRouting(userId: string, phonelineId: string, deviceId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteDeviceRoutingWithHttpInfo(userId, phonelineId, deviceId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete parallel forwarding
     *
     * @param parallelForwardingId e.g. x0
     */
    public deleteParallelForwardingSettings(userId: string, phonelineId: string, parallelForwardingId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteParallelForwardingSettingsWithHttpInfo(userId, phonelineId, parallelForwardingId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Deletes a greeting
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     * @param greetingId e.g. 42
     */
    public deletePhonlineVoicemailGreeting(userId: string, phonelineId: string, voicemailId: string, greetingId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deletePhonlineVoicemailGreetingWithHttpInfo(userId, phonelineId, voicemailId, greetingId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns settings for block anonymous calls
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getBlockAnonymousSetting(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<models.PhonelineBlockAnonymousResponse> {
        return this.getBlockAnonymousSettingWithHttpInfo(userId, phonelineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns settings for busy on busy
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getBusyOnBusySetting(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<models.PhonelineBusyOnBusyResponse> {
        return this.getBusyOnBusySettingWithHttpInfo(userId, phonelineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns all devices
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getDevices(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<models.DevicesResponse> {
        return this.getDevicesWithHttpInfo(userId, phonelineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns all forwardings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getPhonelineForwardings(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<models.ForwardingsResponse> {
        return this.getPhonelineForwardingsWithHttpInfo(userId, phonelineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns all phone numbers
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getPhonelineNumbers(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<models.EndpointNumbersResponse> {
        return this.getPhonelineNumbersWithHttpInfo(userId, phonelineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns all parallel forwardings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getPhonelineParallelForwardings(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<models.ParallelForwardingsResponse> {
        return this.getPhonelineParallelForwardingsWithHttpInfo(userId, phonelineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns all greetings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     */
    public getPhonelineVoicemailGreetings(userId: string, phonelineId: string, voicemailId: string, extraHttpRequestParams?: any): Observable<models.GreetingsResponse> {
        return this.getPhonelineVoicemailGreetingsWithHttpInfo(userId, phonelineId, voicemailId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns all telephone lines
     *
     * @param userId e.g. w0
     */
    public getPhonelines(userId: string, extraHttpRequestParams?: any): Observable<models.PhonelinesResponse> {
        return this.getPhonelinesWithHttpInfo(userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns sipgate.io debug log
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getSipgateIoLogs(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<models.PhonelineSipgateIoLogsResponse> {
        return this.getSipgateIoLogsWithHttpInfo(userId, phonelineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns sipgate.io settings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getSipgateIoSettings(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<models.PhonelineSipgateIoResponse> {
        return this.getSipgateIoSettingsWithHttpInfo(userId, phonelineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns all voicemails
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getVoicemails(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<models.VoicemailsResponse> {
        return this.getVoicemailsWithHttpInfo(userId, phonelineId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * set routing for device to phoneline
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public routeDevices(userId: string, phonelineId: string, body?: models.RouteDeviceRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.routeDevicesWithHttpInfo(userId, phonelineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Sets settings for block anonymous calls
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public setBlockAnonymousSetting(userId: string, phonelineId: string, body?: models.SetBlockAnonymousSettingsRequest, extraHttpRequestParams?: any): Observable<models.PhonelineBlockAnonymousResponse> {
        return this.setBlockAnonymousSettingWithHttpInfo(userId, phonelineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Sets settings for busy on busy
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public setBusyOnBusySetting(userId: string, phonelineId: string, body?: models.SetBusyOnBusySettingsRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.setBusyOnBusySettingWithHttpInfo(userId, phonelineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Change forwarding settings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public setPhonelineForwardingSettings(userId: string, phonelineId: string, body?: models.SetForwardingsRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.setPhonelineForwardingSettingsWithHttpInfo(userId, phonelineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Set sipgate.io URLs
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public setSipgateIoSettings(userId: string, phonelineId: string, body?: models.SetSipgateIoPhonelineSettingsRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.setSipgateIoSettingsWithHttpInfo(userId, phonelineId, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Upload your base64 encoded OGG/MP3/WAV greeting
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     * @param body
     */
    public addGreetingWithHttpInfo(userId: string, phonelineId: string, voicemailId: string, body?: models.AddGreetingRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/voicemails/${voicemailId}/greetings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling addGreeting.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling addGreeting.');
        }
        // verify required parameter 'voicemailId' is not null or undefined
        if (voicemailId === null || voicemailId === undefined) {
            throw new Error('Required parameter voicemailId was null or undefined when calling addGreeting.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Add parallel forwarding
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public addParallelForwardingWithHttpInfo(userId: string, phonelineId: string, body?: models.SetParallelForwardingRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/parallelforwardings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling addParallelForwarding.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling addParallelForwarding.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Change parallel forwarding
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param parallelForwardingId e.g. x0
     * @param body
     */
    public changeParallelForwardingSettingsWithHttpInfo(userId: string, phonelineId: string, parallelForwardingId: string, body?: models.SetParallelForwardingRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/parallelforwardings/${parallelForwardingId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling changeParallelForwardingSettings.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling changeParallelForwardingSettings.');
        }
        // verify required parameter 'parallelForwardingId' is not null or undefined
        if (parallelForwardingId === null || parallelForwardingId === undefined) {
            throw new Error('Required parameter parallelForwardingId was null or undefined when calling changeParallelForwardingSettings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Change phoneline alias
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public changePhonelineWithHttpInfo(userId: string, phonelineId: string, body?: models.SetAliasRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling changePhoneline.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling changePhoneline.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Change greeting settings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     * @param greetingId e.g. 42
     * @param body
     */
    public changePhonelineVoicemailGreetingWithHttpInfo(userId: string, phonelineId: string, voicemailId: string, greetingId: string, body?: models.ChangeVoicemailGreetingRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/voicemails/${voicemailId}/greetings/${greetingId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling changePhonelineVoicemailGreeting.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling changePhonelineVoicemailGreeting.');
        }
        // verify required parameter 'voicemailId' is not null or undefined
        if (voicemailId === null || voicemailId === undefined) {
            throw new Error('Required parameter voicemailId was null or undefined when calling changePhonelineVoicemailGreeting.');
        }
        // verify required parameter 'greetingId' is not null or undefined
        if (greetingId === null || greetingId === undefined) {
            throw new Error('Required parameter greetingId was null or undefined when calling changePhonelineVoicemailGreeting.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Change voicemail settings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     * @param body
     */
    public changeVoicemailSettingsWithHttpInfo(userId: string, phonelineId: string, voicemailId: string, body?: models.ChangeVoicemailRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/voicemails/${voicemailId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling changeVoicemailSettings.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling changeVoicemailSettings.');
        }
        // verify required parameter 'voicemailId' is not null or undefined
        if (voicemailId === null || voicemailId === undefined) {
            throw new Error('Required parameter voicemailId was null or undefined when calling changeVoicemailSettings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Creates a new phoneline for the user
     *
     * @param userId e.g. w0
     */
    public createPhonelineWithHttpInfo(userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling createPhoneline.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * delete routing for device to phoneline
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param deviceId e.g. e0
     */
    public deleteDeviceRoutingWithHttpInfo(userId: string, phonelineId: string, deviceId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/devices/${deviceId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteDeviceRouting.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling deleteDeviceRouting.');
        }
        // verify required parameter 'deviceId' is not null or undefined
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling deleteDeviceRouting.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete parallel forwarding
     *
     * @param parallelForwardingId e.g. x0
     */
    public deleteParallelForwardingSettingsWithHttpInfo(userId: string, phonelineId: string, parallelForwardingId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/parallelforwardings/${parallelForwardingId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'parallelForwardingId' is not null or undefined
        if (parallelForwardingId === null || parallelForwardingId === undefined) {
            throw new Error('Required parameter parallelForwardingId was null or undefined when calling deleteParallelForwardingSettings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes a greeting
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     * @param greetingId e.g. 42
     */
    public deletePhonlineVoicemailGreetingWithHttpInfo(userId: string, phonelineId: string, voicemailId: string, greetingId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/voicemails/${voicemailId}/greetings/${greetingId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deletePhonlineVoicemailGreeting.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling deletePhonlineVoicemailGreeting.');
        }
        // verify required parameter 'voicemailId' is not null or undefined
        if (voicemailId === null || voicemailId === undefined) {
            throw new Error('Required parameter voicemailId was null or undefined when calling deletePhonlineVoicemailGreeting.');
        }
        // verify required parameter 'greetingId' is not null or undefined
        if (greetingId === null || greetingId === undefined) {
            throw new Error('Required parameter greetingId was null or undefined when calling deletePhonlineVoicemailGreeting.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns settings for block anonymous calls
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getBlockAnonymousSettingWithHttpInfo(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/blockanonymous`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getBlockAnonymousSetting.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getBlockAnonymousSetting.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns settings for busy on busy
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getBusyOnBusySettingWithHttpInfo(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/busyonbusy`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getBusyOnBusySetting.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getBusyOnBusySetting.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns all devices
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getDevicesWithHttpInfo(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/devices`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getDevices.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getDevices.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns all forwardings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getPhonelineForwardingsWithHttpInfo(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/forwardings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getPhonelineForwardings.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getPhonelineForwardings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns all phone numbers
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getPhonelineNumbersWithHttpInfo(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/numbers`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getPhonelineNumbers.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getPhonelineNumbers.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns all parallel forwardings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getPhonelineParallelForwardingsWithHttpInfo(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/parallelforwardings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getPhonelineParallelForwardings.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getPhonelineParallelForwardings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns all greetings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param voicemailId e.g. v0
     */
    public getPhonelineVoicemailGreetingsWithHttpInfo(userId: string, phonelineId: string, voicemailId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/voicemails/${voicemailId}/greetings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getPhonelineVoicemailGreetings.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getPhonelineVoicemailGreetings.');
        }
        // verify required parameter 'voicemailId' is not null or undefined
        if (voicemailId === null || voicemailId === undefined) {
            throw new Error('Required parameter voicemailId was null or undefined when calling getPhonelineVoicemailGreetings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns all telephone lines
     *
     * @param userId e.g. w0
     */
    public getPhonelinesWithHttpInfo(userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getPhonelines.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns sipgate.io debug log
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getSipgateIoLogsWithHttpInfo(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/sipgateio/log`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getSipgateIoLogs.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getSipgateIoLogs.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns sipgate.io settings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getSipgateIoSettingsWithHttpInfo(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/sipgateio`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getSipgateIoSettings.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getSipgateIoSettings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns all voicemails
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     */
    public getVoicemailsWithHttpInfo(userId: string, phonelineId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/voicemails`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getVoicemails.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling getVoicemails.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * set routing for device to phoneline
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public routeDevicesWithHttpInfo(userId: string, phonelineId: string, body?: models.RouteDeviceRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/devices`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling routeDevices.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling routeDevices.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Sets settings for block anonymous calls
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public setBlockAnonymousSettingWithHttpInfo(userId: string, phonelineId: string, body?: models.SetBlockAnonymousSettingsRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/blockanonymous`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling setBlockAnonymousSetting.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling setBlockAnonymousSetting.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Sets settings for busy on busy
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public setBusyOnBusySettingWithHttpInfo(userId: string, phonelineId: string, body?: models.SetBusyOnBusySettingsRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/busyonbusy`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling setBusyOnBusySetting.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling setBusyOnBusySetting.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Change forwarding settings
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public setPhonelineForwardingSettingsWithHttpInfo(userId: string, phonelineId: string, body?: models.SetForwardingsRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/forwardings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling setPhonelineForwardingSettings.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling setPhonelineForwardingSettings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Set sipgate.io URLs
     *
     * @param userId e.g. w0
     * @param phonelineId e.g. p0
     * @param body
     */
    public setSipgateIoSettingsWithHttpInfo(userId: string, phonelineId: string, body?: models.SetSipgateIoPhonelineSettingsRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/${userId}/phonelines/${phonelineId}/sipgateio`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling setSipgateIoSettings.');
        }
        // verify required parameter 'phonelineId' is not null or undefined
        if (phonelineId === null || phonelineId === undefined) {
            throw new Error('Required parameter phonelineId was null or undefined when calling setSipgateIoSettings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}

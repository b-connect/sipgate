/**
 * sipgate API
 * This is the sipgate REST API documentation. We build our new applications on this API and we invite you to use it too.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AuthorizationApi {
    protected basePath = 'https://localhost/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Create a session token
     * Use this session token in the &lt;strong&gt;Authorization&lt;/strong&gt; header to access protected routes.&lt;br&gt;&lt;strong&gt;Example header:&lt;/strong&gt;&lt;br&gt;&lt;pre&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/pre&gt;
     * @param body
     */
    public create(body?: models.CreateSessionRequest, extraHttpRequestParams?: any): Observable<models.TokenCreateResponse> {
        return this.createWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create a new OAuth client
     *
     * @param body
     */
    public createOAuthClient(body?: models.CreateNewOAuthClientRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.createOAuthClientWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Request an oauth session token
     * Use this session token in the &lt;strong&gt;Authorization&lt;/strong&gt; header to access protected routes.&lt;br&gt;&lt;strong&gt;Example header:&lt;/strong&gt;&lt;br&gt;&lt;pre&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/pre&gt;
     * @param clientId client_id
     * @param clientSecret client_secret
     * @param code code
     * @param redirectUri redirect_uri
     * @param grantType grant_type
     */
    public createOauthAccessToken(clientId: string, clientSecret: string, code: string, redirectUri: string, grantType: string, extraHttpRequestParams?: any): Observable<models.OauthAccessTokenResponse> {
        return this.createOauthAccessTokenWithHttpInfo(clientId, clientSecret, code, redirectUri, grantType, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Invalidate a session token
     *
     * @param authorization token
     */
    public destroy(authorization?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.destroyWithHttpInfo(authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get OAuth client
     *
     * @param clientId abcdefghi
     */
    public getOAuthClient(clientId: string, extraHttpRequestParams?: any): Observable<models.OAuth2ClientsResponse> {
        return this.getOAuthClientWithHttpInfo(clientId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get all OAuth clients of user
     *
     */
    public getOAuthClients(extraHttpRequestParams?: any): Observable<models.OAuth2ClientsResponse> {
        return this.getOAuthClientsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Redirect the user here for them to authorize your application
     *
     * @param scope The scope(s) for the authentication as a space separated list
     * @param responseType The response type for the authentication
     * @param clientId Your oauth client id
     * @param redirectUri the URL the user will be redirected to after authentication
     * @param state You may provide a state, that we will return in the redirect
     * @param nonce The Nonce will be returned in the id_token if the scope is openid
     */
    public letUserAuthenticate(scope: Array<string>, responseType: string, clientId: string, redirectUri: string, state?: string, nonce?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.letUserAuthenticateWithHttpInfo(scope, responseType, clientId, redirectUri, state, nonce, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Reset oauth2 client-secret
     *
     * @param clientId abcdefghi
     */
    public resetClientSecret(clientId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.resetClientSecretWithHttpInfo(clientId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns information about the logged in user
     *
     * @param authorization token
     */
    public userinfo(authorization?: string, extraHttpRequestParams?: any): Observable<models.UserinfoResponse> {
        return this.userinfoWithHttpInfo(authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Create a session token
     * Use this session token in the &lt;strong&gt;Authorization&lt;/strong&gt; header to access protected routes.&lt;br&gt;&lt;strong&gt;Example header:&lt;/strong&gt;&lt;br&gt;&lt;pre&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/pre&gt;
     * @param body
     */
    public createWithHttpInfo(body?: models.CreateSessionRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/authorization/token`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a new OAuth client
     *
     * @param body
     */
    public createOAuthClientWithHttpInfo(body?: models.CreateNewOAuthClientRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/authorization/oauth/clients`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Request an oauth session token
     * Use this session token in the &lt;strong&gt;Authorization&lt;/strong&gt; header to access protected routes.&lt;br&gt;&lt;strong&gt;Example header:&lt;/strong&gt;&lt;br&gt;&lt;pre&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/pre&gt;
     * @param clientId client_id
     * @param clientSecret client_secret
     * @param code code
     * @param redirectUri redirect_uri
     * @param grantType grant_type
     */
    public createOauthAccessTokenWithHttpInfo(clientId: string, clientSecret: string, code: string, redirectUri: string, grantType: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/authorization/oauth/token`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'clientId' is not null or undefined
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling createOauthAccessToken.');
        }
        // verify required parameter 'clientSecret' is not null or undefined
        if (clientSecret === null || clientSecret === undefined) {
            throw new Error('Required parameter clientSecret was null or undefined when calling createOauthAccessToken.');
        }
        // verify required parameter 'code' is not null or undefined
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling createOauthAccessToken.');
        }
        // verify required parameter 'redirectUri' is not null or undefined
        if (redirectUri === null || redirectUri === undefined) {
            throw new Error('Required parameter redirectUri was null or undefined when calling createOauthAccessToken.');
        }
        // verify required parameter 'grantType' is not null or undefined
        if (grantType === null || grantType === undefined) {
            throw new Error('Required parameter grantType was null or undefined when calling createOauthAccessToken.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (clientId !== undefined) {
            formParams.set('client_id', <any>clientId);
        }

        if (clientSecret !== undefined) {
            formParams.set('client_secret', <any>clientSecret);
        }

        if (code !== undefined) {
            formParams.set('code', <any>code);
        }

        if (redirectUri !== undefined) {
            formParams.set('redirect_uri', <any>redirectUri);
        }

        if (grantType !== undefined) {
            formParams.set('grant_type', <any>grantType);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Invalidate a session token
     *
     * @param authorization token
     */
    public destroyWithHttpInfo(authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/authorization/token`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get OAuth client
     *
     * @param clientId abcdefghi
     */
    public getOAuthClientWithHttpInfo(clientId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/authorization/oauth/clients/${clientId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'clientId' is not null or undefined
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling getOAuthClient.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get all OAuth clients of user
     *
     */
    public getOAuthClientsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/authorization/oauth/clients`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Redirect the user here for them to authorize your application
     *
     * @param scope The scope(s) for the authentication as a space separated list
     * @param responseType The response type for the authentication
     * @param clientId Your oauth client id
     * @param redirectUri the URL the user will be redirected to after authentication
     * @param state You may provide a state, that we will return in the redirect
     * @param nonce The Nonce will be returned in the id_token if the scope is openid
     */
    public letUserAuthenticateWithHttpInfo(scope: Array<string>, responseType: string, clientId: string, redirectUri: string, state?: string, nonce?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/authorization/oauth/authorize`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'scope' is not null or undefined
        if (scope === null || scope === undefined) {
            throw new Error('Required parameter scope was null or undefined when calling letUserAuthenticate.');
        }
        // verify required parameter 'responseType' is not null or undefined
        if (responseType === null || responseType === undefined) {
            throw new Error('Required parameter responseType was null or undefined when calling letUserAuthenticate.');
        }
        // verify required parameter 'clientId' is not null or undefined
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling letUserAuthenticate.');
        }
        // verify required parameter 'redirectUri' is not null or undefined
        if (redirectUri === null || redirectUri === undefined) {
            throw new Error('Required parameter redirectUri was null or undefined when calling letUserAuthenticate.');
        }
        if (scope) {
            scope.forEach((element) => {
                queryParameters.append('scope', <any>element);
            })
        }

        if (responseType !== undefined) {
            queryParameters.set('response_type', <any>responseType);
        }

        if (clientId !== undefined) {
            queryParameters.set('client_id', <any>clientId);
        }

        if (redirectUri !== undefined) {
            queryParameters.set('redirect_uri', <any>redirectUri);
        }

        if (state !== undefined) {
            queryParameters.set('state', <any>state);
        }

        if (nonce !== undefined) {
            queryParameters.set('nonce', <any>nonce);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Reset oauth2 client-secret
     *
     * @param clientId abcdefghi
     */
    public resetClientSecretWithHttpInfo(clientId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/authorization/oauth/clients/${clientId}/secret`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'clientId' is not null or undefined
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling resetClientSecret.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns information about the logged in user
     *
     * @param authorization token
     */
    public userinfoWithHttpInfo(authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/authorization/userinfo`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
